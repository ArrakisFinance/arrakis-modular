// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity 0.8.19;

import '@openzeppelin/contracts/utils/Strings.sol';
import '@uniswap/v3-core/contracts/libraries/BitMath.sol';
import '@solady/contracts/utils/Base64.sol';

library NFTSVG {
    bytes16 private constant HEX_DIGITS = "0123456789abcdef";

    /// @notice Parameters for generating the URI
    struct SVGParams {
        address vault;
        uint256 amount0;
        uint256 amount1;
        uint8 decimals0;
        uint8 decimals1;
        string symbol0;
        string symbol1;
    }

    /// @notice Generates a URI for a given vault
    /// @param params_ Parameters for generating the URI
    function generateTokenURI(SVGParams memory params_) public pure returns (string memory) {
        string memory name = _generateName(params_);
        string memory description = _generateDescription(params_);
        string memory image = Base64.encode(bytes(_generateSVGImage(params_.vault)));

        return string(
            abi.encodePacked(
                'data:application/json;base64,',
                Base64.encode(
                    bytes(
                        abi.encodePacked(
                            '{"name":"',
                            name,
                            '", "description":"',
                            description,
                            '", "image": "',
                            'data:image/svg+xml;base64,',
                            image,
                            '"}'
                        )
                    )
                )
            )
        );
    }

    /// @notice Generates the name of the URI for a given vault
    /// @param params_ Parameters for generating the URI
    function _generateName(SVGParams memory params_) internal pure returns (string memory) {
        return string(
            abi.encodePacked(
                'Arrakis Private Vault ',
                params_.symbol0,
                "/",
                params_.symbol1
            )
        );
    }

    /// @notice Generates the description of the URI for a given vault
    /// @param params_ Parameters for generating the URI
    function _generateDescription(SVGParams memory params_) internal pure returns (string memory) {
        (string memory s1, string memory s2) = _addressToString(params_.vault);
        
        return string(
            abi.encodePacked(
                'This NFT gives ownership of an Arrakis Modular Private Vault (',
                s1,
                s2,
                ') with an inventory of ',
                _uintToFloatString(params_.amount0, params_.decimals0),
                ' ',
                params_.symbol0,
                ' and ',
                _uintToFloatString(params_.amount1, params_.decimals1),
                ' ',
                params_.symbol1,
                '. DO NOT TRANSFER TO UNTRUSTED PARTIES.'
            )
        );
    }

    /// @notice Generates the SVG image of the URI for a given vault
    /// @param vault_ The vault address represented by the NFT
    function _generateSVGImage(address vault_) internal pure returns (string memory svg) {
        return string(
            abi.encodePacked(
                '<svg width="290" height="500" viewBox="0 0 290 500" fill="none" xmlns="http://www.w3.org/2000/svg"><defs>',
                _generateSVGDefs(),
                '</defs>',
                _generateSVGFrame(),
                _generateSVGFront(),
                _generateSVGBack(vault_),
                '<animate id="back" xlink:href="#back" attributeName="opacity" values="0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;0;0" dur="30s" repeatCount="indefinite"/>',
                '<animate id="front" xlink:href="#front" attributeName="opacity" values="1;1;1;1;1;1;1;1;1;1;1;1;1;1;0;0;0;0;0;0;0;0;1" dur="30s" repeatCount="indefinite"/>',
                '</svg>'
            )
        );
    }

    // #region auxiliary functions for generating the SVG image

    function _generateSVGDefs() internal pure returns (string memory) {
        return string(
            abi.encodePacked(
                '<linearGradient id="rect-gradient" gradientUnits="objectBoundingBox" x1="0" y1="0" x2=".75" y2="1.5">',
                '<stop offset="0"><animate attributeName="stop-color" values="#050302;#050302;#7D3711;#7D3711;#DC601D;#FFA760;#FFA760;#7D3711;#7D3711;#050302;#050302;#050302;#050302;" dur="30s" repeatCount="indefinite"></animate></stop>',
                '<stop offset=".33"><animate attributeName="stop-color" values="#050302;#050302;#7D3711;#FFA760;#FFA760;#F56A20;#DC601D;#FA7C40;#7D3711;#7D3711;#050302;#050302;#050302;" dur="30s" repeatCount="indefinite"></animate></stop>',
                '<stop offset=".67"><animate attributeName="stop-color" values="#050302;#050302;#050302;#7D3711;#DC601D;#FFA760;#FFA760;#F56A20;#DC601D;#7D3711;#E89857;#050302;#050302;" dur="30s" repeatCount="indefinite"></animate></stop>',
                '<stop offset="1"><animate attributeName="stop-color" values="#050302;#050302;#050302;#050302;#7D3711;#DC601D;#DC601D;#FA7C40;#FA7C40;#DC601D;#E89857;#050302;#050302;" dur="30s" repeatCount="indefinite"></animate></stop>',
                '<animateTransform attributeName="gradientTransform" type="translate" from="-.8 -.8" to=".8 .8" dur="30s" repeatCount="indefinite" /></linearGradient>',
                '<linearGradient id="tail-gradient" x1="183.99" y1="59.2903" x2="171.409" y2="178.815" gradientUnits="userSpaceOnUse"><stop stop-color="white"/><stop offset="1" stop-color="white" stop-opacity="0"/></linearGradient>',
                _generateSVGMasks()
            )
        );
    }

    function _generateSVGMasks() internal pure returns (string memory) {
        return string(
            abi.encodePacked(
                '<mask id="waves-mask"><rect x="0" y="0" width="100%" height="100%" fill="white" />',
                '<g style="scale(3)"><linearGradient id="waves2" x1="0" x2="1" y1="0" y2="0"><stop stop-color="#000000" offset="0"></stop><stop stop-color="#000000" offset="1"></stop></linearGradient>',
                '<path d="" fill="black" opacity="0.33"><animate attributeName="d" dur="8s" repeatCount="indefinite" keyTimes="0;0.333;0.667;1" calcMode="spline" keySplines="0.5 0 0.5 1;0.5 0 0.5 1;0.5 0 0.5 1" begin="0s" values="M0 0L0 279.72Q72.50 95.90 145 80.31T290 -2.87L290 0Z;M0 0L0 178.34Q72.50 66.44 145 50.16T290 -49.50L290 0Z;M0 0L0 244.09Q72.50 178.37 145 151.37T290 -124.25L290 0Z;M0 0L0 279.72Q72.50 95.90 145 80.31T290 -2.87L290 0Z"></animate></path>'
                '<path d="" fill="black" opacity="0.33"><animate attributeName="d" dur="8s" repeatCount="indefinite" keyTimes="0;0.333;0.667;1" calcMode="spline" keySplines="0.5 0 0.5 1;0.5 0 0.5 1;0.5 0 0.5 1" begin="-4.166666666666667s" values="M0 0L0 258.07Q72.50 130.78 145 98.80T290 -39.43L290 0Z;M0 0L0 242.23Q72.50 39.39 145 16.94T290 -28.59L290 0Z;M0 0L0 224.02Q72.50 53.87 145 31.25T290 -65.65L290 0Z;M0 0L0 258.07Q72.50 130.78 145 98.80T290 -39.43L290 0Z"></animate></path>',
                '</g></mask>',
                '<mask id="dune_mask" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="11" y="202" width="268" height="184"><rect x="11" y="202" width="268" height="184" rx="24" fill="#D9D9D9"/></mask>'
            )
        );
    }

    function _generateSVGFrame() internal pure returns (string memory) {
        return string(
            abi.encodePacked(
                '<rect width="290" height="500" rx="24" fill="black"/><rect width="290" height="500" rx="24" fill="url(#rect-gradient)"/>',
                '<g id="waves" mask="url(#waves-mask)"><g style="transform:translate(145.0px,250.0px) scale(-1,1) translate(-145.0px,-250.0px)"><linearGradient id="waves1" x1="0" x2="1" y1="0" y2="0"><stop stop-color="#ffffff" offset="0"></stop><stop stop-color="#ffffff" offset="1"></stop></linearGradient>',
                '<path d="" fill="white" opacity="0.033"><animate attributeName="d" dur="15s" repeatCount="indefinite" keyTimes="0;0.333;0.667;1" calcMode="spline" keySplines="0.5 0 0.5 1;0.5 0 0.5 1;0.5 0 0.5 1" begin="0s" values="M0 0L0 225.85Q72.50 535.81 145 487.99T290 618.39L290 0Z;M0 0L0 62.93Q72.50 363.50 145 349.64T290 259.60L290 0Z;M0 0L0 215.10Q72.50 239.83 145 212.50T290 525.33L290 0Z;M0 0L0 225.85Q72.50 535.81 145 487.99T290 618.39L290 0Z"></animate></path>',
                '<path d="" fill="white" opacity="0.033"><animate attributeName="d" dur="15s" repeatCount="indefinite" keyTimes="0;0.333;0.667;1" calcMode="spline" keySplines="0.5 0 0.5 1;0.5 0 0.5 1;0.5 0 0.5 1" begin="-3.7037037037037037s" values="M0 0L0 -139.57Q72.50 522.50 145 485.95T290 463.92L290 0Z;M0 0L0 206.11Q72.50 251.85 145 229.63T290 357.17L290 0Z;M0 0L0 -112.70Q72.50 427.35 145 404.61T290 683.65L290 0Z;M0 0L0 -139.57Q72.50 522.50 145 485.95T290 463.92L290 0Z"></animate></path>',
                '<path d="" fill="white" opacity="0.033"><animate attributeName="d" dur="15s" repeatCount="indefinite" keyTimes="0;0.333;0.667;1" calcMode="spline" keySplines="0.5 0 0.5 1;0.5 0 0.5 1;0.5 0 0.5 1" begin="-7.407407407407407s" values="M0 0L0 120.25Q72.50 269.55 145 248.41T290 380.02L290 0Z;M0 0L0 -35.24Q72.50 502.96 145 476.67T290 570.38L290 0Z;M0 0L0 -1.04Q72.50 515.48 145 487.93T290 370.53L290 0Z;M0 0L0 120.25Q72.50 269.55 145 248.41T290 380.02L290 0Z"></animate></path>',
                '</g></g><rect x="10.5" y="10.5" width="269" height="479" rx="23.5" stroke="white" stroke-opacity="0.33" stroke-width="2"/>',
                _generateSVGLogo(),
                _generateSVGDunes()
            )
        );
    }

    function _generateSVGLogo() internal pure returns (string memory) {
        return string(
            abi.encodePacked(
                '<g id="text-logo" fill="white">',
                '<path d="M156.432 441.96L136.459 441.076C136.384 441.074 136.309 441.09 136.242 441.123C136.174 441.157 136.116 441.206 136.072 441.267C136.028 441.329 136 441.4 135.991 441.475C135.981 441.549 135.991 441.625 136.018 441.696L137.722 446.024C137.758 446.116 137.822 446.193 137.905 446.244C137.988 446.296 138.086 446.32 138.183 446.312L154.898 444.901C154.999 444.892 155.1 444.917 155.184 444.972C155.269 445.027 155.332 445.109 155.365 445.204L155.96 446.899C155.982 446.963 155.99 447.032 155.982 447.1C155.974 447.168 155.951 447.233 155.915 447.291C155.878 447.349 155.829 447.397 155.771 447.433C155.713 447.469 155.647 447.492 155.579 447.499L132.139 450.029C132.056 450.037 131.977 450.068 131.911 450.119C131.844 450.169 131.793 450.237 131.763 450.315C131.733 450.393 131.725 450.477 131.74 450.56C131.755 450.642 131.793 450.718 131.849 450.78L136.851 456.43C136.915 456.502 137 456.552 137.094 456.573C137.187 456.594 137.285 456.584 137.374 456.546L149.653 451.139C149.748 451.098 149.853 451.091 149.953 451.117C150.052 451.144 150.14 451.203 150.202 451.286C150.242 451.341 150.27 451.404 150.283 451.472L151.175 456.385H152.942C153.02 456.385 153.096 456.365 153.164 456.327C153.232 456.289 153.289 456.234 153.33 456.168L158.343 447.971C158.376 447.917 158.398 447.857 158.406 447.795C158.414 447.733 158.409 447.67 158.391 447.609L156.847 442.285C156.821 442.194 156.767 442.114 156.692 442.055C156.618 441.996 156.527 441.962 156.432 441.958V441.96ZM87.4976 441.96L67.5272 441.076C67.4523 441.074 67.3781 441.091 67.3112 441.125C67.2442 441.158 67.1867 441.208 67.1438 441.269C67.1008 441.331 67.0737 441.402 67.065 441.476C67.0562 441.551 67.066 441.626 67.0936 441.696L68.7976 446.024C68.832 446.112 68.8928 446.187 68.9717 446.238C69.0506 446.29 69.1435 446.315 69.2376 446.312L85.956 444.901C86.0564 444.893 86.1568 444.918 86.2413 444.973C86.3257 445.028 86.3895 445.109 86.4224 445.204L87.0144 446.899C87.0367 446.961 87.045 447.028 87.0387 447.094C87.0324 447.16 87.0117 447.224 86.978 447.282C86.9442 447.339 86.8983 447.388 86.8435 447.425C86.7887 447.463 86.7264 447.488 86.6608 447.499L63.2064 450.03C63.1231 450.038 63.0436 450.069 62.9769 450.12C62.9103 450.171 62.8589 450.239 62.8287 450.317C62.7984 450.395 62.7904 450.48 62.8055 450.562C62.8207 450.645 62.8584 450.721 62.9144 450.784L67.916 456.432C67.9811 456.506 68.0684 456.557 68.165 456.578C68.2616 456.598 68.3623 456.587 68.452 456.546L80.7208 451.14C80.7835 451.112 80.8517 451.099 80.9203 451.101C80.9889 451.103 81.0561 451.121 81.1168 451.153C81.1775 451.185 81.2301 451.23 81.2707 451.286C81.3113 451.341 81.3388 451.405 81.3512 451.472L82.2464 456.386H84.0128C84.0903 456.386 84.1663 456.365 84.2338 456.327C84.3013 456.289 84.3579 456.234 84.3984 456.168L89.4144 447.972C89.4466 447.918 89.4675 447.858 89.4758 447.796C89.484 447.734 89.4795 447.67 89.4624 447.61L87.912 442.286C87.8861 442.195 87.8319 442.114 87.7571 442.055C87.6824 441.996 87.591 441.963 87.496 441.959L87.4976 441.96Z"/>',
                '<path d="M111.021 441.088L98.723 444.05C98.6276 444.073 98.5274 444.064 98.4375 444.025C98.3476 443.986 98.2729 443.918 98.2246 443.833L96.7422 441.23C96.7028 441.16 96.6455 441.102 96.5762 441.062C96.5069 441.021 96.4281 441 96.3478 441H92.2438C92.1657 441 92.0889 441.02 92.0208 441.058C91.9527 441.096 91.8957 441.152 91.8553 441.218C91.8149 441.285 91.7924 441.361 91.7901 441.44C91.7878 441.518 91.8058 441.595 91.8422 441.664L93.319 444.477C93.3557 444.546 93.3738 444.624 93.3714 444.703C93.369 444.781 93.3463 444.858 93.3054 444.925L86.7174 455.694C86.675 455.763 86.6517 455.842 86.6498 455.923C86.648 456.003 86.6678 456.083 86.7071 456.154C86.7464 456.224 86.8038 456.283 86.8734 456.324C86.943 456.365 87.0223 456.386 87.103 456.386H92.6118C92.6894 456.386 92.7657 456.366 92.8333 456.328C92.9008 456.29 92.9574 456.235 92.9974 456.169L99.163 446.074C99.2048 446.006 99.264 445.95 99.3345 445.912C99.4051 445.873 99.4844 445.854 99.5646 445.857L112.967 446.318C113.044 446.323 113.121 446.308 113.191 446.275C113.26 446.242 113.32 446.191 113.365 446.129C113.409 446.066 113.437 445.992 113.446 445.916C113.454 445.839 113.443 445.761 113.413 445.69L111.536 441.356C111.494 441.259 111.421 441.179 111.327 441.13C111.233 441.081 111.125 441.066 111.021 441.088V441.088Z"/>',
                '<path d="M134.053 441.091L121.275 444.171C121.175 444.194 121.07 444.185 120.977 444.144C120.883 444.103 120.804 444.033 120.753 443.945L119.226 441.239C119.185 441.167 119.126 441.106 119.054 441.064C118.981 441.022 118.899 441 118.816 441H114.829C114.748 441 114.668 441.02 114.597 441.06C114.526 441.1 114.467 441.157 114.424 441.227C114.382 441.296 114.359 441.375 114.357 441.457C114.354 441.538 114.373 441.618 114.411 441.69L115.804 444.351C115.842 444.423 115.861 444.505 115.858 444.586C115.855 444.668 115.831 444.748 115.787 444.817L108.785 456.275C108.741 456.347 108.717 456.429 108.716 456.514C108.715 456.598 108.736 456.682 108.778 456.755C108.82 456.829 108.88 456.889 108.954 456.931C109.027 456.973 109.11 456.995 109.195 456.994H114.92C115.001 456.994 115.08 456.973 115.151 456.933C115.221 456.893 115.28 456.837 115.322 456.768L121.73 446.275C121.774 446.203 121.837 446.145 121.91 446.105C121.984 446.065 122.067 446.046 122.151 446.049L136.083 446.528C136.162 446.531 136.24 446.514 136.311 446.478C136.382 446.443 136.442 446.39 136.487 446.325C136.532 446.26 136.56 446.185 136.568 446.107C136.577 446.028 136.565 445.949 136.535 445.876L134.585 441.37C134.542 441.269 134.466 441.186 134.369 441.136C134.272 441.085 134.16 441.069 134.053 441.091V441.091ZM194.325 441.225L185.13 456.272C185.087 456.344 185.064 456.426 185.062 456.51C185.061 456.594 185.082 456.676 185.122 456.75C185.163 456.823 185.223 456.884 185.295 456.926C185.368 456.969 185.45 456.991 185.534 456.991H191.26C191.341 456.991 191.419 456.97 191.49 456.931C191.56 456.892 191.619 456.836 191.661 456.768L201.043 441.722C201.077 441.668 201.099 441.609 201.109 441.546C201.118 441.484 201.116 441.42 201.1 441.359C201.085 441.298 201.058 441.241 201.02 441.19C200.982 441.14 200.935 441.097 200.88 441.066C200.808 441.023 200.726 441 200.642 440.999H194.737C194.655 440.998 194.574 441.018 194.501 441.058C194.429 441.097 194.368 441.155 194.325 441.225V441.225ZM212.13 442.811L223.688 446.481C223.786 446.512 223.892 446.51 223.989 446.475C224.086 446.44 224.17 446.375 224.226 446.288L227.227 441.73C227.273 441.659 227.3 441.577 227.303 441.492C227.307 441.407 227.288 441.323 227.249 441.248C227.208 441.173 227.148 441.111 227.075 441.067C227.002 441.023 226.919 441 226.834 441H205.326C205.246 441.001 205.167 441.021 205.097 441.06C205.027 441.099 204.967 441.155 204.924 441.223L201.442 446.879C201.381 446.977 201.358 447.093 201.377 447.206C201.396 447.319 201.456 447.421 201.546 447.493C201.604 447.541 201.674 447.574 201.748 447.589L216.034 450.566C216.139 450.588 216.233 450.646 216.301 450.729C216.369 450.812 216.407 450.916 216.408 451.023C216.408 451.094 216.393 451.164 216.363 451.229L216.084 451.786C216.047 451.868 215.987 451.938 215.912 451.988C215.836 452.037 215.748 452.064 215.658 452.064H198.544C198.464 452.065 198.386 452.085 198.316 452.123C198.246 452.162 198.188 452.217 198.145 452.285L195.637 456.272C195.593 456.344 195.569 456.426 195.566 456.51C195.564 456.593 195.584 456.676 195.624 456.75C195.665 456.824 195.724 456.885 195.797 456.928C195.869 456.971 195.952 456.994 196.036 456.994H204.576C204.625 456.994 204.674 456.986 204.721 456.972L216.145 453.349C216.251 453.316 216.364 453.322 216.466 453.365C216.568 453.407 216.652 453.485 216.702 453.583L218.352 456.743C218.392 456.819 218.452 456.883 218.526 456.929C218.6 456.974 218.684 456.998 218.771 456.999H219.695C219.776 456.999 219.855 456.978 219.925 456.939C219.995 456.899 220.054 456.842 220.096 456.774L224.148 450.189C224.209 450.089 224.231 449.97 224.21 449.855C224.189 449.74 224.126 449.637 224.033 449.565C223.971 449.519 223.898 449.488 223.822 449.476L209.784 447.169C209.708 447.156 209.636 447.125 209.575 447.078C209.514 447.031 209.465 446.97 209.433 446.899C209.401 446.829 209.386 446.753 209.391 446.676C209.395 446.599 209.418 446.524 209.458 446.459L211.573 443.001C211.631 442.911 211.717 442.843 211.819 442.809C211.92 442.774 212.03 442.775 212.13 442.811V442.811ZM187.853 445.757L190.324 441.718C190.356 441.665 190.378 441.605 190.387 441.543C190.397 441.481 190.394 441.418 190.379 441.357C190.364 441.297 190.337 441.239 190.3 441.189C190.262 441.139 190.216 441.096 190.162 441.064C190.089 441.022 190.006 441 189.922 441H183.514C183.47 440.999 183.425 441.006 183.383 441.019L171.028 444.587C170.927 444.615 170.818 444.609 170.72 444.569C170.622 444.529 170.54 444.457 170.488 444.365L168.707 441.239C168.666 441.167 168.607 441.107 168.535 441.065C168.463 441.023 168.381 441 168.297 441H164.425C164.343 441 164.263 441.021 164.193 441.06C164.122 441.1 164.062 441.158 164.02 441.227C163.977 441.296 163.953 441.376 163.951 441.457C163.949 441.539 163.968 441.619 164.006 441.691L165.424 444.388C165.465 444.459 165.487 444.539 165.487 444.621C165.487 444.702 165.465 444.783 165.424 444.854L158.436 456.277C158.404 456.331 158.382 456.39 158.373 456.452C158.363 456.514 158.366 456.577 158.381 456.638C158.397 456.699 158.423 456.756 158.461 456.807C158.498 456.857 158.545 456.899 158.599 456.932C158.671 456.974 158.754 456.997 158.838 456.997H164.411C164.492 456.996 164.571 456.976 164.642 456.936C164.713 456.897 164.772 456.84 164.815 456.771L170.404 447.632C170.452 447.554 170.522 447.492 170.605 447.452C170.688 447.413 170.78 447.399 170.871 447.411C170.962 447.423 171.047 447.462 171.117 447.523C171.186 447.584 171.235 447.663 171.26 447.752L173.748 456.651C173.776 456.75 173.835 456.837 173.917 456.9C173.999 456.962 174.099 456.996 174.202 456.997H182.118C182.198 456.996 182.277 456.975 182.348 456.936C182.418 456.896 182.477 456.84 182.519 456.771L182.784 456.339C182.842 456.244 182.865 456.131 182.848 456.021C182.831 455.91 182.776 455.81 182.692 455.737L172.549 446.821C172.475 446.758 172.422 446.674 172.397 446.579C172.372 446.485 172.377 446.385 172.412 446.294C172.446 446.202 172.507 446.124 172.588 446.068C172.668 446.013 172.764 445.984 172.861 445.985H187.459C187.539 445.984 187.617 445.962 187.686 445.922C187.755 445.882 187.812 445.825 187.853 445.757V445.757Z"/>',
                '</g>'
            )
        );
    }

    function _generateSVGDunes() internal pure returns (string memory) {
        return string(
            abi.encodePacked(
                '<g id="dunes" transform="translate(0 33)"><g mask="url(#dune_mask)">',
                '<path d="M0.5 355.5C178.5 330.5 153.023 310.248 108 316C76.5 320.024 86.3739 305.5 106 294.5C135.856 277.767 137.872 272.876 130.5 267.5M130.5 267.5C73.5966 287.906 40.9646 300.008 0.5 305.5M130.5 267.5C169.496 271.232 185.689 274.308 210.5 280.5C249.139 288.743 267.721 291.842 290 292" stroke="white" stroke-opacity="0.33"/>',
                '<path d="M0.5 262.5C0.5 262.5 48.5 255 102 253C155.5 251 183 241.5 189.5 235.227M189.5 235.227C222.621 246.569 191.696 261.647 163.5 271M189.5 235.227C198.96 233.427 225.5 242.827 244.5 246.329C273.228 251.623 280.179 251.674 291 251.263" stroke="white" stroke-opacity="0.33"/>',
                '</g></g>',
                '<path d="M156.432 441.96L136.459 441.076C136.384 441.074 136.309 441.09 136.242 441.123C136.174 441.157 136.116 441.206 136.072 441.267C136.028 441.329 136 441.4 135.991 441.475C135.981 441.549 135.991 441.625 136.018 441.696L137.722 446.024C137.758 446.116 137.822 446.193 137.905 446.244C137.988 446.296 138.086 446.32 138.183 446.312L154.898 444.901C154.999 444.892 155.1 444.917 155.184 444.972C155.269 445.027 155.332 445.109 155.365 445.204L155.96 446.899C155.982 446.963 155.99 447.032 155.982 447.1C155.974 447.168 155.951 447.233 155.915 447.291C155.878 447.349 155.829 447.397 155.771 447.433C155.713 447.469 155.647 447.492 155.579 447.499L132.139 450.029C132.056 450.037 131.977 450.068 131.911 450.119C131.844 450.169 131.793 450.237 131.763 450.315C131.733 450.393 131.725 450.477 131.74 450.56C131.755 450.642 131.793 450.718 131.849 450.78L136.851 456.43C136.915 456.502 137 456.552 137.094 456.573C137.187 456.594 137.285 456.584 137.374 456.546L149.653 451.139C149.748 451.098 149.853 451.091 149.953 451.117C150.052 451.144 150.14 451.203 150.202 451.286C150.242 451.341 150.27 451.404 150.283 451.472L151.175 456.385H152.942C153.02 456.385 153.096 456.365 153.164 456.327C153.232 456.289 153.289 456.234 153.33 456.168L158.343 447.971C158.376 447.917 158.398 447.857 158.406 447.795C158.414 447.733 158.409 447.67 158.391 447.609L156.847 442.285C156.821 442.194 156.767 442.114 156.692 442.055C156.618 441.996 156.527 441.962 156.432 441.958V441.96ZM87.4976 441.96L67.5272 441.076C67.4523 441.074 67.3781 441.091 67.3112 441.125C67.2442 441.158 67.1867 441.208 67.1438 441.269C67.1008 441.331 67.0737 441.402 67.065 441.476C67.0562 441.551 67.066 441.626 67.0936 441.696L68.7976 446.024C68.832 446.112 68.8928 446.187 68.9717 446.238C69.0506 446.29 69.1435 446.315 69.2376 446.312L85.956 444.901C86.0564 444.893 86.1568 444.918 86.2413 444.973C86.3257 445.028 86.3895 445.109 86.4224 445.204L87.0144 446.899C87.0367 446.961 87.045 447.028 87.0387 447.094C87.0324 447.16 87.0117 447.224 86.978 447.282C86.9442 447.339 86.8983 447.388 86.8435 447.425C86.7887 447.463 86.7264 447.488 86.6608 447.499L63.2064 450.03C63.1231 450.038 63.0436 450.069 62.9769 450.12C62.9103 450.171 62.8589 450.239 62.8287 450.317C62.7984 450.395 62.7904 450.48 62.8055 450.562C62.8207 450.645 62.8584 450.721 62.9144 450.784L67.916 456.432C67.9811 456.506 68.0684 456.557 68.165 456.578C68.2616 456.598 68.3623 456.587 68.452 456.546L80.7208 451.14C80.7835 451.112 80.8517 451.099 80.9203 451.101C80.9889 451.103 81.0561 451.121 81.1168 451.153C81.1775 451.185 81.2301 451.23 81.2707 451.286C81.3113 451.341 81.3388 451.405 81.3512 451.472L82.2464 456.386H84.0128C84.0903 456.386 84.1663 456.365 84.2338 456.327C84.3013 456.289 84.3579 456.234 84.3984 456.168L89.4144 447.972C89.4466 447.918 89.4675 447.858 89.4758 447.796C89.484 447.734 89.4795 447.67 89.4624 447.61L87.912 442.286C87.8861 442.195 87.8319 442.114 87.7571 442.055C87.6824 441.996 87.591 441.963 87.496 441.959L87.4976 441.96Z" fill="white"/>',
                '<path d="M111.021 441.088L98.723 444.05C98.6276 444.073 98.5274 444.064 98.4375 444.025C98.3476 443.986 98.2729 443.918 98.2246 443.833L96.7422 441.23C96.7028 441.16 96.6455 441.102 96.5762 441.062C96.5069 441.021 96.4281 441 96.3478 441H92.2438C92.1657 441 92.0889 441.02 92.0208 441.058C91.9527 441.096 91.8957 441.152 91.8553 441.218C91.8149 441.285 91.7924 441.361 91.7901 441.44C91.7878 441.518 91.8058 441.595 91.8422 441.664L93.319 444.477C93.3557 444.546 93.3738 444.624 93.3714 444.703C93.369 444.781 93.3463 444.858 93.3054 444.925L86.7174 455.694C86.675 455.763 86.6517 455.842 86.6498 455.923C86.648 456.003 86.6678 456.083 86.7071 456.154C86.7464 456.224 86.8038 456.283 86.8734 456.324C86.943 456.365 87.0223 456.386 87.103 456.386H92.6118C92.6894 456.386 92.7657 456.366 92.8333 456.328C92.9008 456.29 92.9574 456.235 92.9974 456.169L99.163 446.074C99.2048 446.006 99.264 445.95 99.3345 445.912C99.4051 445.873 99.4844 445.854 99.5646 445.857L112.967 446.318C113.044 446.323 113.121 446.308 113.191 446.275C113.26 446.242 113.32 446.191 113.365 446.129C113.409 446.066 113.437 445.992 113.446 445.916C113.454 445.839 113.443 445.761 113.413 445.69L111.536 441.356C111.494 441.259 111.421 441.179 111.327 441.13C111.233 441.081 111.125 441.066 111.021 441.088V441.088Z" fill="white"/>',
                '<path d="M134.053 441.091L121.275 444.171C121.175 444.194 121.07 444.185 120.977 444.144C120.883 444.103 120.804 444.033 120.753 443.945L119.226 441.239C119.185 441.167 119.126 441.106 119.054 441.064C118.981 441.022 118.899 441 118.816 441H114.829C114.748 441 114.668 441.02 114.597 441.06C114.526 441.1 114.467 441.157 114.424 441.227C114.382 441.296 114.359 441.375 114.357 441.457C114.354 441.538 114.373 441.618 114.411 441.69L115.804 444.351C115.842 444.423 115.861 444.505 115.858 444.586C115.855 444.668 115.831 444.748 115.787 444.817L108.785 456.275C108.741 456.347 108.717 456.429 108.716 456.514C108.715 456.598 108.736 456.682 108.778 456.755C108.82 456.829 108.88 456.889 108.954 456.931C109.027 456.973 109.11 456.995 109.195 456.994H114.92C115.001 456.994 115.08 456.973 115.151 456.933C115.221 456.893 115.28 456.837 115.322 456.768L121.73 446.275C121.774 446.203 121.837 446.145 121.91 446.105C121.984 446.065 122.067 446.046 122.151 446.049L136.083 446.528C136.162 446.531 136.24 446.514 136.311 446.478C136.382 446.443 136.442 446.39 136.487 446.325C136.532 446.26 136.56 446.185 136.568 446.107C136.577 446.028 136.565 445.949 136.535 445.876L134.585 441.37C134.542 441.269 134.466 441.186 134.369 441.136C134.272 441.085 134.16 441.069 134.053 441.091V441.091ZM194.325 441.225L185.13 456.272C185.087 456.344 185.064 456.426 185.062 456.51C185.061 456.594 185.082 456.676 185.122 456.75C185.163 456.823 185.223 456.884 185.295 456.926C185.368 456.969 185.45 456.991 185.534 456.991H191.26C191.341 456.991 191.419 456.97 191.49 456.931C191.56 456.892 191.619 456.836 191.661 456.768L201.043 441.722C201.077 441.668 201.099 441.609 201.109 441.546C201.118 441.484 201.116 441.42 201.1 441.359C201.085 441.298 201.058 441.241 201.02 441.19C200.982 441.14 200.935 441.097 200.88 441.066C200.808 441.023 200.726 441 200.642 440.999H194.737C194.655 440.998 194.574 441.018 194.501 441.058C194.429 441.097 194.368 441.155 194.325 441.225V441.225ZM212.13 442.811L223.688 446.481C223.786 446.512 223.892 446.51 223.989 446.475C224.086 446.44 224.17 446.375 224.226 446.288L227.227 441.73C227.273 441.659 227.3 441.577 227.303 441.492C227.307 441.407 227.288 441.323 227.249 441.248C227.208 441.173 227.148 441.111 227.075 441.067C227.002 441.023 226.919 441 226.834 441H205.326C205.246 441.001 205.167 441.021 205.097 441.06C205.027 441.099 204.967 441.155 204.924 441.223L201.442 446.879C201.381 446.977 201.358 447.093 201.377 447.206C201.396 447.319 201.456 447.421 201.546 447.493C201.604 447.541 201.674 447.574 201.748 447.589L216.034 450.566C216.139 450.588 216.233 450.646 216.301 450.729C216.369 450.812 216.407 450.916 216.408 451.023C216.408 451.094 216.393 451.164 216.363 451.229L216.084 451.786C216.047 451.868 215.987 451.938 215.912 451.988C215.836 452.037 215.748 452.064 215.658 452.064H198.544C198.464 452.065 198.386 452.085 198.316 452.123C198.246 452.162 198.188 452.217 198.145 452.285L195.637 456.272C195.593 456.344 195.569 456.426 195.566 456.51C195.564 456.593 195.584 456.676 195.624 456.75C195.665 456.824 195.724 456.885 195.797 456.928C195.869 456.971 195.952 456.994 196.036 456.994H204.576C204.625 456.994 204.674 456.986 204.721 456.972L216.145 453.349C216.251 453.316 216.364 453.322 216.466 453.365C216.568 453.407 216.652 453.485 216.702 453.583L218.352 456.743C218.392 456.819 218.452 456.883 218.526 456.929C218.6 456.974 218.684 456.998 218.771 456.999H219.695C219.776 456.999 219.855 456.978 219.925 456.939C219.995 456.899 220.054 456.842 220.096 456.774L224.148 450.189C224.209 450.089 224.231 449.97 224.21 449.855C224.189 449.74 224.126 449.637 224.033 449.565C223.971 449.519 223.898 449.488 223.822 449.476L209.784 447.169C209.708 447.156 209.636 447.125 209.575 447.078C209.514 447.031 209.465 446.97 209.433 446.899C209.401 446.829 209.386 446.753 209.391 446.676C209.395 446.599 209.418 446.524 209.458 446.459L211.573 443.001C211.631 442.911 211.717 442.843 211.819 442.809C211.92 442.774 212.03 442.775 212.13 442.811V442.811ZM187.853 445.757L190.324 441.718C190.356 441.665 190.378 441.605 190.387 441.543C190.397 441.481 190.394 441.418 190.379 441.357C190.364 441.297 190.337 441.239 190.3 441.189C190.262 441.139 190.216 441.096 190.162 441.064C190.089 441.022 190.006 441 189.922 441H183.514C183.47 440.999 183.425 441.006 183.383 441.019L171.028 444.587C170.927 444.615 170.818 444.609 170.72 444.569C170.622 444.529 170.54 444.457 170.488 444.365L168.707 441.239C168.666 441.167 168.607 441.107 168.535 441.065C168.463 441.023 168.381 441 168.297 441H164.425C164.343 441 164.263 441.021 164.193 441.06C164.122 441.1 164.062 441.158 164.02 441.227C163.977 441.296 163.953 441.376 163.951 441.457C163.949 441.539 163.968 441.619 164.006 441.691L165.424 444.388C165.465 444.459 165.487 444.539 165.487 444.621C165.487 444.702 165.465 444.783 165.424 444.854L158.436 456.277C158.404 456.331 158.382 456.39 158.373 456.452C158.363 456.514 158.366 456.577 158.381 456.638C158.397 456.699 158.423 456.756 158.461 456.807C158.498 456.857 158.545 456.899 158.599 456.932C158.671 456.974 158.754 456.997 158.838 456.997H164.411C164.492 456.996 164.571 456.976 164.642 456.936C164.713 456.897 164.772 456.84 164.815 456.771L170.404 447.632C170.452 447.554 170.522 447.492 170.605 447.452C170.688 447.413 170.78 447.399 170.871 447.411C170.962 447.423 171.047 447.462 171.117 447.523C171.186 447.584 171.235 447.663 171.26 447.752L173.748 456.651C173.776 456.75 173.835 456.837 173.917 456.9C173.999 456.962 174.099 456.996 174.202 456.997H182.118C182.198 456.996 182.277 456.975 182.348 456.936C182.418 456.896 182.477 456.84 182.519 456.771L182.784 456.339C182.842 456.244 182.865 456.131 182.848 456.021C182.831 455.91 182.776 455.81 182.692 455.737L172.549 446.821C172.475 446.758 172.422 446.674 172.397 446.579C172.372 446.485 172.377 446.385 172.412 446.294C172.446 446.202 172.507 446.124 172.588 446.068C172.668 446.013 172.764 445.984 172.861 445.985H187.459C187.539 445.984 187.617 445.962 187.686 445.922C187.755 445.882 187.812 445.825 187.853 445.757V445.757Z" fill="white"/>'
            )
        );
    }

    function _generateSVGFront() internal pure returns (string memory) {
        return string(
            abi.encodePacked(
                '<g id="front" fill="white">',
                '<path d="M171.691 152.953L134.814 127.595L114.918 136.159C114.776 136.241 114.61 136.274 114.447 136.253C114.284 136.231 114.133 136.157 114.017 136.041C113.901 135.924 113.826 135.773 113.805 135.61C113.783 135.447 113.816 135.282 113.899 135.139L122.189 115.243L113.899 95.3515C113.814 95.2091 113.78 95.0429 113.8 94.8788C113.821 94.7146 113.895 94.562 114.012 94.4448C114.129 94.3276 114.281 94.2525 114.445 94.2313C114.609 94.2101 114.775 94.244 114.918 94.3276L134.814 102.631L154.706 94.3276C154.849 94.246 155.015 94.2137 155.178 94.2356C155.341 94.2575 155.492 94.3324 155.609 94.4488C155.725 94.5651 155.8 94.7165 155.822 94.8796C155.844 95.0427 155.811 95.2085 155.73 95.3515L147.439 115.243L172.524 152.146C172.631 152.257 172.69 152.405 172.687 152.559C172.685 152.713 172.621 152.859 172.511 152.966C172.401 153.073 172.252 153.132 172.098 153.129C171.944 153.127 171.798 153.064 171.691 152.953Z"/>',
                '<g id="sand-worm">',
                '<path opacity="0.6" d="M142.289 53.0082C140.09 52.9128 136.103 53.6677 133.283 54.2794C133.064 54.3278 132.866 54.445 132.718 54.6138C132.57 54.7826 132.479 54.9942 132.46 55.2178C132.441 55.4415 132.493 55.6655 132.61 55.8572C132.727 56.0489 132.902 56.1983 133.109 56.2837L135.578 57.2989C135.578 57.2989 139.023 55.3423 142.289 53.0082Z"/>',
                '<path opacity="0.6" d="M135.257 65.8977C137.673 65.9238 140.866 65.8977 142.727 65.7546C140.155 64.453 136.389 62.7654 136.389 62.7654L134.653 63.9801C134.47 64.1087 134.332 64.2923 134.26 64.5044C134.188 64.7165 134.186 64.9461 134.253 65.1598C134.32 65.3734 134.454 65.5602 134.634 65.6929C134.814 65.8256 135.033 65.8973 135.257 65.8977Z"/>',
                '<path d="M211.14 112.992C207.492 82.4446 182.151 57.377 151.977 53.7805C147.539 53.2512 143.569 53.0646 142.463 53.0082C142.038 52.9841 141.619 53.1067 141.274 53.3553C139.296 54.761 137.152 56.236 135.061 57.6547C134.675 57.9172 134.365 58.276 134.16 58.6956C133.956 59.1152 133.865 59.5809 133.896 60.0466C133.927 60.5123 134.079 60.9618 134.338 61.3504C134.596 61.739 134.952 62.0534 135.369 62.2621C137.773 63.4595 140.293 64.7177 142.003 65.5767C142.309 65.7282 142.651 65.7941 142.992 65.7676C143.46 65.7286 148.91 65.8804 150.571 66.0713C167.925 68.0236 184.168 78.1192 193.565 92.8916C212.355 121.959 202.511 160.216 174.433 178.012C173.973 178.303 173.487 178.598 172.979 178.88C171.292 179.851 172.628 182.428 174.381 181.569C174.958 181.287 175.522 180.992 176.068 180.702C199.908 167.339 214.984 140.636 211.14 112.992Z" fill="url(#tail-gradient)"/>',
                '<animateTransform attributeName="transform" attributeType="XML" type="rotate" from="360 140 120" to="0 140 120" dur="25s" repeatCount="indefinite"/>',
                '</g></g>'
            )
        );
    }

    function _generateSVGBack(address vault_) internal pure returns (string memory) {
        (string memory s1, string memory s2) = _addressToString(vault_);
        return string(
            abi.encodePacked(
                '<g id="back" attributeName="opacity" values="0;" fill="white" font-family="system-ui" font-weight="bold" text-anchor="middle">',
                '<text font-size="18" x="145" y="75">This vault gives ownership</text><text font-size="18" x="145" y="100">rights of a private vault</text>',
                '<g opacity="0.67"><text font-size="13" font-weight="normal" x="145" y="127.5">Be careful when transferring</text>',
                '<text font-size="13" font-weight="normal" x="145" y="172.5">Vault ID</text>',
                '</g><text x="145" y="200">',
                s1,
                '</text><text x="145" y="222.5">',
                s2,
                '</text></g>'
            )
        );
    }

    // #endregion auxiliary functions for generating the SVG image

    /// @notice Converts uints to float strings with 4 decimal places.
    /// @param value_ uint to convert to string.
    /// @param decimals_ number of decimal places of the input value.
    function _uintToFloatString(uint256 value_, uint8 decimals_) internal pure returns (string memory) {
        uint256 scaleFactor = 10**decimals_;
        uint256 fraction = (value_ % scaleFactor) / 10**(decimals_ - 4);
        string memory fractionStr;
        if (fraction == 0) {
            fractionStr = '0000';
        } else if (fraction < 10) {
            fractionStr = string(abi.encodePacked('000', _uintToString(fraction)));
        } else if (fraction < 100) {
            fractionStr = string(abi.encodePacked('00', _uintToString(fraction)));
        } else if (fraction < 1000) {
            fractionStr = string(abi.encodePacked('0', _uintToString(fraction)));
        } else {
            fractionStr = _uintToString(fraction);
        }

        return string(abi.encodePacked(_uintToString(value_ / scaleFactor), '.', fractionStr));
    }

    /// @notice Code borrowed form:
    /// https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol
    ///
    /// @notice Converts uints to strings.
    /// @param value_ uint to convert to string.
    function _uintToString(uint256 value_) internal pure returns (string memory str) {
        /// @solidity memory-safe-assembly
        assembly {
            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but we allocate 160 bytes
            // to keep the free memory pointer word aligned. We'll need 1 word for the length, 1 word for the
            // trailing zeros padding, and 3 other words for a max of 78 digits. In total: 5 * 32 = 160 bytes.
            let newFreeMemoryPointer := add(mload(0x40), 160)

            // Update the free memory pointer to avoid overriding our string.
            mstore(0x40, newFreeMemoryPointer)

            // Assign str to the end of the zone of newly allocated memory.
            str := sub(newFreeMemoryPointer, 32)

            // Clean the last word of memory it may not be overwritten.
            mstore(str, 0)

            // Cache the end of the memory to calculate the length later.
            let end := str

            // We write the string from rightmost digit to leftmost digit.
            // The following is essentially a do-while loop that also handles the zero case.
            // prettier-ignore
            for { let temp := value_ } 1 {} {
                // Move the pointer 1 byte to the left.
                str := sub(str, 1)

                // Write the character to the pointer.
                // The ASCII index of the '0' character is 48.
                mstore8(str, add(48, mod(temp, 10)))

                // Keep dividing temp until zero.
                temp := div(temp, 10)

                 // prettier-ignore
                if iszero(temp) { break }
            }

            // Compute and cache the final total length of the string.
            let length := sub(end, str)

            // Move the pointer 32 bytes leftwards to make room for the length.
            str := sub(str, 32)

            // Store the string's length at the start of memory allocated for our string.
            mstore(str, length)
        }
    }

    function _addressToString(address addr_) internal pure returns (string memory, string memory) {
        uint256 value = uint256(uint160(addr_));
        bytes memory s1 = new bytes(23);
        bytes memory s2 = new bytes(20);
        s1[0] = "0";
        s1[1] = "x";

        for (uint256 i = 19; i > 0; i--) {
            s2[i] = HEX_DIGITS[value & 0xf];
            value >>= 4;
        }

        for (uint256 i = 22; i > 1; i--) {
            s1[i] = HEX_DIGITS[value & 0xf];
            value >>= 4;
        }

        return (string(s1), string(s2));
    }
}