// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.20;

import {RangeMintBurn, Range} from "../structs/SUniswap.sol";
import {IUniswapV3Factory} from "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol";

interface IUniV3MultiPosition {
    // #region events.

    event LogMint(RangeMintBurn[] ranges, uint256 deposit0, uint256 deposit1);
    event LogBurn(RangeMintBurn[] ranges, uint256 burn0, uint256 burn1);
    event LogCollect(uint256 collects0, uint256 collects1);

    // #endregion events.

    /// @notice mint function used to mint uniV3 position.
    /// @param ranges_ list of positions to mint.
    /// @param minDeposit0_ minimum amount of token0 to deposit on uniswap v3.
    /// @param minDeposit1_ minimum amount of token1 to deposit on uniswap v3.
    /// @return deposit0 amount of token0 deposited on uniswap v3.
    /// @return deposit1 amount of token1 deposited on uniswap v3.
    function mint(
        RangeMintBurn[] calldata ranges_,
        uint256 minDeposit0_,
        uint256 minDeposit1_
    ) external returns (uint256 deposit0, uint256 deposit1);

    /// @notice burn function used to burn uniV3 position.
    /// @param ranges_ list of positions to burn
    /// @param minBurn0_ minimum amount of token0 to withdraw from uniswap v3.
    /// @param minBurn1_ minimum amount of token1 to withdraw from uniswap v3.
    /// @return burn0 amount of token0 withdrawn on uniswap v3. 
    /// @return burn1 amount of token1 withdrawn on uniswap v3. 
    function burn(
        RangeMintBurn[] calldata ranges_,
        uint256 minBurn0_,
        uint256 minBurn1_
    ) external returns (uint256 burn0, uint256 burn1);

    /// @notice collect function used to collect fees
    /// generated by module positions on uniswap v3.
    /// @return collects0 amount of token0 collected.
    /// @return collects1 amount of token1 collected. 
    function collect() external returns (uint256 collects0, uint256 collects1);

    /// @notice function used to get the list of active ranges.
    /// @return ranges array of active ranges.
    function ranges() external view returns(Range[] memory ranges);

    /// @notice function used to get uniswap V3 factory.
    /// @return uniV3Factory uniswap v3 factory.
    function factory() external view returns(IUniswapV3Factory uniV3Factory);
}
